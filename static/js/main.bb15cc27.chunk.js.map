{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachements","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb15cc27.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n      e.preventDefault();\n\n      const authObject = { 'Project-ID': \"088d7bd9-b7bb-455b-bd72-d981c3c8c61a\", 'User-Name': username, 'User-Secret': password }; \n\n      try {\n        await axios.get('https://api.chatengine.io/chats', {headers: authObject });\n\n        localStorage.setItem('username', username);\n        localStorage.setItem('password', password);\n\n        window.location.reload();\n      } catch (error) {\n        setError('Oops, incorrect credentials.')\n      }\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Chat Application</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>Start Chatting</span>\n            </button>\n          </div>\n          <h2 className=\"error\">{error}</h2>\n        </form>\n      </div>\n\n    </div>\n  )\n}\n\nexport default LoginForm;","import { useState } from 'react';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\nconst MessageForm = (props) => {\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleSubmit = (event) => {\n      event.preventDefault();\n\n      const text = value.trim();\n\n      if(text.length > 0) sendMessage(creds, chatId, { text });\n\n      setValue('');\n  }\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n\n    isTyping(props, chatId);\n  }\n\n  const handleUpload = (event) => {\n      sendMessage(creds, chatId, {files: event.target.files, text: ''})\n  }\n\n  return(\n    <form className=\"message-form\" onSubmit={handleSubmit}>\n      <input \n        className=\"message-input\"\n        placeholder=\"Send a message ...\"\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <label htmlFor=\"upload-button\">\n        <span className=\"image-button\">\n          <PictureOutlined className=\"picture-icon\"/>\n        </span>\n      </label>\n      <input \n        type=\"file\"\n        multiple={false}\n        id=\"upload-button\"\n        style={{ display: 'none '}}\n        onChange={handleUpload}\n      />\n      <button type=\"submit\" className=\"send-button\">\n        <SendOutlined className=\"send-icon\"/>\n      </button>\n    </form>\n  );\n}\n\nexport default MessageForm;","const MyMessage = ({ message }) => {\n  if(message?.attachements?.length > 0){\n    return (\n      <img\n        src={message.attachements[0].file}\n        alt=\"message-attachment\"\n        className=\"message-image\"\n        style={{ float: 'right' }}\n        />\n    )\n  }\n  return(\n    <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3b2a50'}}>\n        {message.text}\n    </div>\n  );\n}\n\nexport default MyMessage;","const TheirMessage = ( { lastMessage, message }) => {\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return(\n    <div className=\"message-row\">\n      {isFirstMessageByUser && (\n        <div\n          className=\"message-avatar\"\n          style={{backgroundImage: `url(${message?.sender?.avatar})`}}\n          />\n      )}\n      {message?.attachements?.length > 0\n          ? (\n            <img\n              src={message.attachements[0].file}\n              alt=\"message-attachment\"\n              className=\"message-image\"\n              style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n              />\n          ) : (\n            <div className=\"message\" style={{ float: 'left', backgroundColor: '#cabcdc', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\n                {message.text}\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default TheirMessage;","import { BranchesOutlined } from '@ant-design/icons';\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages} = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) => {\n    return chat.people.map((person, index) => person.last_read === message.id && (\n      <div \n        key={`read_${index}`}\n        className=\"read-receipt\"\n        style={{\n          float: isMyMessage ? 'right' : 'left',\n          backgroundImage: `url(${person?.person?.avatar})`\n        }}\n      />\n    ))\n  }\n  \n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n        const message = messages[key];\n        const lastMessageKey = index === 0 ? null : keys[index - 1];\n        const isMyMessage = userName === message.sender.username;\n\n        return (\n          <div key={`msg_${index}`} style={{width: '100%'}}>\n            <div className=\"message-block\">\n              {\n                isMyMessage\n                ? <MyMessage message={message} />\n                : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\n              }\n            </div>\n            <div className = \"read-receipts\" style={{ marginRight: isMyMessage ?'18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n              {renderReadReceipts(message, isMyMessage)}\n            </div>\n          </div>\n        );\n    })\n  }\n\n    if(!chat) return '';\n\n    return(\n      <div className=\"chat-feed\">\n        <div className =\"chat-title-container\">\n          <div className =\"chat-title\">{chat?.title}</div>\n          <div className=\"chat-subtitle\">\n            {chat.people.map((person) => ` ${person.person.username}`)}\n          </div>\n        </div>\n        {renderMessages()}\n        <div style={{ height: '100px' }} />\n        <div className=\"message-form-container\">\n          <MessageForm { ...props} chatId={activeChat} />\n        </div>\n      </div>\n    );\n}\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\nimport LoginForm from './components/LoginForm';\nimport ChatFeed from './components/ChatFeed';\nimport './App.css';\n\nconst App = () => {\n  if(!localStorage.getItem('username')) return <LoginForm />\n\n  return(\n    <ChatEngine \n        height=\"100vh\"\n        projectID=\"088d7bd9-b7bb-455b-bd72-d981c3c8c61a\"\n        userName={localStorage.getItem('username')}\n        userSecret={localStorage.getItem('password')}\n        renderChatFeed={(chatAppProps)=> <ChatFeed {...chatAppProps}/>}\n    />\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}